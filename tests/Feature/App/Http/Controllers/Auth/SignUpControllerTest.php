<?php

namespace Tests\Feature\App\Http\Controllers\Auth;

use App\Http\Controllers\Auth\SignUpController;
use App\Http\Requests\SignUpFormRequest;
use App\Listeners\SendEmailNewUserListener;
use App\Notifications\NewUserNotification;
use Database\Factories\UserFactory;
use Domain\Auth\Models\User;
use Illuminate\Auth\Events\Registered;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Notification;
use Tests\TestCase;

class SignUpControllerTest extends TestCase
{
    use RefreshDatabase;

    protected array $request;

    /**
     * @test
     * @return void
     */

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->request = SignUpFormRequest::factory()->create([
            'email' => 'some3@mail.ru',
            'password' => '123456789',
            'password_confirmation' => '123456789'
        ]);
    }

    private function request()
    {
        return $this->post(
            action([SignUpController::class, 'handle']),
            $this->request
        );
    }

    private function findUser(): User
    {
        return User::query()
            ->where('email', $this->request['email'])
            ->first();
    }

    /**
     * @test
     * @return void
     */
    public function it_sign_up_success(): void
    {
        Notification::fake();
        Event::fake();

        $request = SignUpFormRequest::factory()->create([
//            'email' => 'some3@mail.ru',
            'password' => '123456789',
            'password_confirmation' => '123456789'
        ]);

        $this->assertDatabaseMissing('users', [
            'email' => $request['email']
        ]);

        $response = $this->post(
            action([SignUpController::class, 'handle']),
            $request
        );

        $response->assertValid();

        $this->assertDatabaseHas('users', [
            'email' => $request['email']
        ]);

        $user = User::query()
            ->where('email', $request['email'])
            ->first();

        Event::assertDispatched(Registered::class);
        Event::assertListening(Registered::class, SendEmailNewUserListener::class);
        $event = new Registered($user);
        $listener = new SendEmailNewUserListener();
        $listener->handle($event);

        Notification::assertSentTo($user, NewUserNotification::class);
        $this->assertAuthenticatedAs($user);

        $response->assertRedirect(route('home'));
    }

    /**
     * @test
     * @return void
     */
    public function it_sign_up_page_success(): void
    {
        $this->get(action([SignUpController::class, 'page']))
            ->assertOk()
            ->assertSee('Регистрация')
            ->assertViewIs('auth.sign-up');
    }

    /**
     * @test
     * @return void
     */
    public function it_registered_event_and_listeners_dispatched(): void
    {
        Event::fake();
        $this->request();
        Event::assertDispatched(Registered::class);
        Event::assertListening(Registered::class, SendEmailNewUserListener::class);
    }

    /**
     * @test
     * @return void
     */
    public function it_notification_sent()
    {
        $this->request();
        Notification::assertSentTo($this->findUser(), NewUserNotification::class);
    }

    /**
     * @test
     * @return void
     */
    public function it_validation_success()
    {
        $this->request()->assertValid();
    }

    /**
     * @test
     * @return void
     */
    public function it_should_fail_validation_on_password_confirm(): void
    {
        $this->request['password'] = '123123';
        $this->request['password_confirmation'] = '1231';

        $this->request()->assertInvalid(['password']);
    }

    /**
     * @test
     * @return void
     */
    public function it_user_created_success()
    {
        $this->assertDatabaseMissing('users', [
            'email' => $this->request['email']
        ]);
        $this->request();

        $this->assertDatabaseHas('users', [
            'email' => $this->request['email']
        ]);
    }

    /**
     * @test
     * @return void
     */
    public function it_should_fail_on_unique_email(): void
    {
        UserFactory::new()->create(['email' => $this->request['email']]);

        $this->assertDatabaseHas('users', ['email' => $this->request['email']]);

        $this->request()->assertInvalid(['email']);
    }

    /**
     * @test
     * @return void
     */
    public function it_user_authenticated_after_and_redirected(): void
    {
        $this->request()
            ->assertRedirect(route('home'));

        $this->assertAuthenticatedAs($this->findUser());
    }

}
